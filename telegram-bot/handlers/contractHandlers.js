/**
 * –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏
 */

const logger = require('../utils/logger');
const MessageBuilder = require('../utils/messageBuilder');
const { MESSAGES, LIMITS, EMOJI } = require('../utils/constants');

class ContractHandlers {
    constructor(bot, apiClient) {
        this.bot = bot;
        this.api = apiClient;
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
    async showContractsList(chatId, page = 1, filters = {}) {
        try {
            logger.userAction(chatId, 'view_contracts_list', { page, filters });
            
            const loadingMsg = await this.bot.sendMessage(chatId, MESSAGES.LOADING);
            
            const response = await this.api.getContracts(LIMITS.MAX_SEARCH_RESULTS);
            
            if (!response.ok || !Array.isArray(response.items)) {
                await this.bot.editMessageText(MESSAGES.NO_CONTRACTS, {
                    chat_id: chatId,
                    message_id: loadingMsg.message_id
                });
                return;
            }

            let contracts = response.items;
            
            // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
            if (Object.keys(filters).length > 0) {
                contracts = this.applyFilters(contracts, filters);
            }

            if (contracts.length === 0) {
                await this.bot.editMessageText(MESSAGES.NO_CONTRACTS, {
                    chat_id: chatId,
                    message_id: loadingMsg.message_id
                });
                return;
            }

            // –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
            const totalPages = Math.ceil(contracts.length / LIMITS.CONTRACTS_PER_PAGE);
            const startIndex = (page - 1) * LIMITS.CONTRACTS_PER_PAGE;
            const endIndex = startIndex + LIMITS.CONTRACTS_PER_PAGE;
            const pageContracts = contracts.slice(startIndex, endIndex);

            const message = MessageBuilder.formatContractsList(pageContracts, page, totalPages);
            const keyboard = this.createContractsListKeyboard(pageContracts, page, totalPages);

            await this.bot.editMessageText(message, {
                chat_id: chatId,
                message_id: loadingMsg.message_id,
                parse_mode: 'Markdown',
                ...keyboard
            });

        } catch (error) {
            logger.botError(error, { action: 'showContractsList', chatId });
            await this.bot.sendMessage(chatId, MESSAGES.ERROR_GENERIC);
        }
    }

    // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    applyFilters(contracts, filters) {
        return contracts.filter(contract => {
            // –§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
            if (filters.status && contract.status !== filters.status) {
                return false;
            }

            // –§—ñ–ª—å—Ç—Ä –∑–∞ —Å—É–º–æ—é
            if (filters.minAmount && parseFloat(contract.amount) < filters.minAmount) {
                return false;
            }

            // –§—ñ–ª—å—Ç—Ä –∑–∞ –ø–µ—Ä—ñ–æ–¥–æ–º
            if (filters.period) {
                const contractDate = new Date(contract.date);
                const now = new Date();
                
                switch (filters.period) {
                    case 'month':
                        if (contractDate.getMonth() !== now.getMonth() || 
                            contractDate.getFullYear() !== now.getFullYear()) {
                            return false;
                        }
                        break;
                    case 'week':
                        const weekAgo = new Date();
                        weekAgo.setDate(now.getDate() - 7);
                        if (contractDate < weekAgo) {
                            return false;
                        }
                        break;
                }
            }

            // –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–µ–∫—Å—Ç–æ–º (–∫–ª—ñ—î–Ω—Ç, –Ω–æ–º–µ—Ä)
            if (filters.text) {
                const searchText = filters.text.toLowerCase();
                const searchFields = [
                    contract.number,
                    contract.client,
                    contract.description
                ].join(' ').toLowerCase();
                
                if (!searchFields.includes(searchText)) {
                    return false;
                }
            }

            return true;
        });
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ–≥–æ–≤–æ—Ä—ñ–≤
    createContractsListKeyboard(contracts, currentPage, totalPages) {
        const buttons = [];

        // –ö–Ω–æ–ø–∫–∏ –¥—ñ–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—É
        contracts.forEach(contract => {
            buttons.push([
                { 
                    text: `${contract.number} - ${contract.client}`, 
                    callback_data: `contract_details_${contract.number}` 
                }
            ]);
        });

        // –ö–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
        buttons.push([
            { text: `${EMOJI.INVOICE} –†–∞—Ö—É–Ω–æ–∫`, callback_data: 'quick_invoice' },
            { text: `${EMOJI.ACT} –ê–∫—Ç`, callback_data: 'quick_act' },
            { text: `${EMOJI.REGENERATE} –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏`, callback_data: 'quick_regen' }
        ]);

        // –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
        if (totalPages > 1) {
            const navButtons = [];
            
            if (currentPage > 1) {
                navButtons.push({ 
                    text: `${EMOJI.PREV} –ü–æ–ø–µ—Ä–µ–¥–Ω—è`, 
                    callback_data: `contracts_page_${currentPage - 1}` 
                });
            }
            
            navButtons.push({ 
                text: `${currentPage}/${totalPages}`, 
                callback_data: 'page_info' 
            });
            
            if (currentPage < totalPages) {
                navButtons.push({ 
                    text: `–ù–∞—Å—Ç—É–ø–Ω–∞ ${EMOJI.NEXT}`, 
                    callback_data: `contracts_page_${currentPage + 1}` 
                });
            }
            
            buttons.push(navButtons);
        }

        // –§—ñ–ª—å—Ç—Ä–∏ —Ç–∞ –ø–æ—à—É–∫
        buttons.push([
            { text: `${EMOJI.SEARCH} –ü–æ—à—É–∫`, callback_data: 'search_contracts' },
            { text: 'üéõÔ∏è –§—ñ–ª—å—Ç—Ä–∏', callback_data: 'show_filters' }
        ]);

        // –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é
        buttons.push([{ 
            text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', 
            callback_data: 'back_to_menu' 
        }]);

        return { reply_markup: { inline_keyboard: buttons } };
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –¥–æ–≥–æ–≤–æ—Ä—É
    async showContractDetails(chatId, contractNumber) {
        try {
            logger.userAction(chatId, 'view_contract_details', { contractNumber });
            
            const loadingMsg = await this.bot.sendMessage(chatId, MESSAGES.LOADING);
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–æ–≥–æ–≤–æ—Ä—É
            const response = await this.api.getContracts();
            const contract = response.items?.find(c => c.number === contractNumber);
            
            if (!contract) {
                await this.bot.editMessageText(
                    `‚ùå –î–æ–≥–æ–≤—ñ—Ä ${contractNumber} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`,
                    {
                        chat_id: chatId,
                        message_id: loadingMsg.message_id
                    }
                );
                return;
            }

            const message = this.formatContractDetails(contract);
            const keyboard = this.createContractDetailsKeyboard(contractNumber);

            await this.bot.editMessageText(message, {
                chat_id: chatId,
                message_id: loadingMsg.message_id,
                parse_mode: 'Markdown',
                ...keyboard
            });

        } catch (error) {
            logger.botError(error, { action: 'showContractDetails', chatId, contractNumber });
            await this.bot.sendMessage(chatId, MESSAGES.ERROR_GENERIC);
        }
    }

    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–æ–≥–æ–≤–æ—Ä—É
    formatContractDetails(contract) {
        const status = MessageBuilder.getStatusEmoji(contract.status);
        
        return `üìã **–î–µ—Ç–∞–ª—ñ –¥–æ–≥–æ–≤–æ—Ä—É ${contract.number}** ${status}

üë§ **–ö–ª—ñ—î–Ω—Ç:** ${contract.client}
üí∞ **–°—É–º–∞:** ${MessageBuilder.formatAmount(contract.amount)}
üìÖ **–î–∞—Ç–∞:** ${MessageBuilder.formatDate(contract.date)}
üë®‚Äçüíº **–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å:** ${contract.performer || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üìù **–°—Ç–∞—Ç—É—Å:** ${contract.status || '–ê–∫—Ç–∏–≤–Ω–∏–π'}

üìÑ **–û–ø–∏—Å:**
${contract.description || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}

üîó **–î–æ–∫—É–º–µ–Ω—Ç–∏:**
${contract.contractUrl ? `‚Ä¢ [–î–æ–≥–æ–≤—ñ—Ä](${contract.contractUrl})` : '‚Ä¢ –î–æ–≥–æ–≤—ñ—Ä: –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ'}
${contract.invoiceUrl ? `‚Ä¢ [–†–∞—Ö—É–Ω–æ–∫](${contract.invoiceUrl})` : '‚Ä¢ –†–∞—Ö—É–Ω–æ–∫: –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ'}
${contract.actUrl ? `‚Ä¢ [–ê–∫—Ç](${contract.actUrl})` : '‚Ä¢ –ê–∫—Ç: –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ'}
${contract.folderUrl ? `‚Ä¢ [–ü–∞–ø–∫–∞ Drive](${contract.folderUrl})` : ''}`;
    }

    // –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –¥–æ–≥–æ–≤–æ—Ä—É
    createContractDetailsKeyboard(contractNumber) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: `${EMOJI.INVOICE} –†–∞—Ö—É–Ω–æ–∫`, callback_data: `invoice_${contractNumber}` },
                        { text: `${EMOJI.ACT} –ê–∫—Ç`, callback_data: `act_${contractNumber}` }
                    ],
                    [
                        { text: `${EMOJI.REGENERATE} –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏`, callback_data: `regen_${contractNumber}` },
                        { text: `${EMOJI.EDIT} –†–µ–¥–∞–≥—É–≤–∞—Ç–∏`, callback_data: `edit_${contractNumber}` }
                    ],
                    [
                        { text: 'üîô –î–æ —Å–ø–∏—Å–∫—É', callback_data: 'contracts_page_1' },
                        { text: 'üè† –î–æ –º–µ–Ω—é', callback_data: 'back_to_menu' }
                    ]
                ]
            }
        };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–∞—Ö—É–Ω–∫—É
    async generateInvoice(chatId, contractNumber) {
        try {
            logger.contractAction(contractNumber, 'generate_invoice', chatId);
            
            const processingMsg = await this.bot.sendMessage(
                chatId, 
                `üí∞ –ì–µ–Ω–µ—Ä—É—é —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä—É ${contractNumber}...`
            );

            const response = await this.api.generateInvoice(contractNumber);
            
            if (response.ok) {
                await this.bot.editMessageText(
                    `‚úÖ –†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\nüìÑ [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫](${response.url})`,
                    {
                        chat_id: chatId,
                        message_id: processingMsg.message_id,
                        parse_mode: 'Markdown'
                    }
                );
            } else {
                await this.bot.editMessageText(
                    `‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É: ${response.error || '–Ω–µ–≤—ñ–¥–æ–º–∞'}`,
                    {
                        chat_id: chatId,
                        message_id: processingMsg.message_id
                    }
                );
            }

        } catch (error) {
            logger.botError(error, { action: 'generateInvoice', contractNumber });
            await this.bot.sendMessage(chatId, MESSAGES.ERROR_GENERIC);
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–∫—Ç—É
    async generateAct(chatId, contractNumber) {
        try {
            logger.contractAction(contractNumber, 'generate_act', chatId);
            
            const processingMsg = await this.bot.sendMessage(
                chatId, 
                `üìÑ –ì–µ–Ω–µ—Ä—É—é –∞–∫—Ç –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä—É ${contractNumber}...`
            );

            const response = await this.api.generateAct(contractNumber);
            
            if (response.ok) {
                await this.bot.editMessageText(
                    `‚úÖ –ê–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\nüìÑ [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç](${response.url})`,
                    {
                        chat_id: chatId,
                        message_id: processingMsg.message_id,
                        parse_mode: 'Markdown'
                    }
                );
            } else {
                await this.bot.editMessageText(
                    `‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–∫—Ç—É: ${response.error || '–Ω–µ–≤—ñ–¥–æ–º–∞'}`,
                    {
                        chat_id: chatId,
                        message_id: processingMsg.message_id
                    }
                );
            }

        } catch (error) {
            logger.botError(error, { action: 'generateAct', contractNumber });
            await this.bot.sendMessage(chatId, MESSAGES.ERROR_GENERIC);
        }
    }

    // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–≥–æ–≤–æ—Ä—É
    async regenerateContract(chatId, contractNumber) {
        try {
            logger.contractAction(contractNumber, 'regenerate', chatId);
            
            const processingMsg = await this.bot.sendMessage(
                chatId, 
                `üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–æ–≤—É—é –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä—É ${contractNumber}...`
            );

            const response = await this.api.regenerateContract(contractNumber);
            
            if (response.ok) {
                let message = `‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${contractNumber}!\n\n`;
                if (response.contractUrl) message += `üìã [–î–æ–≥–æ–≤—ñ—Ä](${response.contractUrl})\n`;
                if (response.invoiceUrl) message += `üí∞ [–†–∞—Ö—É–Ω–æ–∫](${response.invoiceUrl})\n`;
                if (response.actUrl) message += `üìÑ [–ê–∫—Ç](${response.actUrl})\n`;

                await this.bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: processingMsg.message_id,
                    parse_mode: 'Markdown'
                });
            } else {
                await this.bot.editMessageText(
                    `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: ${response.error || '–Ω–µ–≤—ñ–¥–æ–º–∞'}`,
                    {
                        chat_id: chatId,
                        message_id: processingMsg.message_id
                    }
                );
            }

        } catch (error) {
            logger.botError(error, { action: 'regenerateContract', contractNumber });
            await this.bot.sendMessage(chatId, MESSAGES.ERROR_GENERIC);
        }
    }
}

module.exports = ContractHandlers;
