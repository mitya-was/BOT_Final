/**
 * –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
 */

const { EMOJI, BUTTON_TEXTS, LIMITS } = require('./constants');

class MessageBuilder {
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    static createMainMenu() {
        return {
            reply_markup: {
                keyboard: [
                    [BUTTON_TEXTS.LIST_CONTRACTS, BUTTON_TEXTS.NEW_CONTRACT],
                    [BUTTON_TEXTS.GENERATE_INVOICE, BUTTON_TEXTS.GENERATE_ACT],
                    [BUTTON_TEXTS.REGENERATE, BUTTON_TEXTS.EDIT_CONTRACT],
                    [BUTTON_TEXTS.STATISTICS, BUTTON_TEXTS.SETTINGS]
                ],
                resize_keyboard: true,
                one_time_keyboard: false
            }
        };
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏
    static createContractsKeyboard(contracts, actionPrefix, showEdit = false) {
        const buttons = contracts.slice(0, LIMITS.MAX_INLINE_BUTTONS).map(contract => {
            const row = [{
                text: `${contract.number} - ${contract.client}`,
                callback_data: `${actionPrefix}${contract.number}`
            }];
            
            if (showEdit) {
                row.push({
                    text: `${EMOJI.EDIT}`,
                    callback_data: `edit_${contract.number}`
                });
            }
            
            return row;
        });

        buttons.push([{
            text: BUTTON_TEXTS.BACK_TO_MENU,
            callback_data: 'back_to_menu'
        }]);

        return { reply_markup: { inline_keyboard: buttons } };
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
    static createPaginationKeyboard(currentPage, totalPages, baseCallback) {
        const buttons = [];
        
        // –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ –∫–Ω–æ–ø–∫–∏
        if (totalPages > 1) {
            const navRow = [];
            
            if (currentPage > 1) {
                navRow.push({
                    text: `${EMOJI.FIRST} 1`,
                    callback_data: `${baseCallback}_page_1`
                });
                navRow.push({
                    text: `${EMOJI.PREV}`,
                    callback_data: `${baseCallback}_page_${currentPage - 1}`
                });
            }
            
            navRow.push({
                text: `${currentPage}/${totalPages}`,
                callback_data: 'page_info'
            });
            
            if (currentPage < totalPages) {
                navRow.push({
                    text: `${EMOJI.NEXT}`,
                    callback_data: `${baseCallback}_page_${currentPage + 1}`
                });
                navRow.push({
                    text: `${totalPages} ${EMOJI.LAST}`,
                    callback_data: `${baseCallback}_page_${totalPages}`
                });
            }
            
            buttons.push(navRow);
        }

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.push([{
            text: BUTTON_TEXTS.BACK_TO_MENU,
            callback_data: 'back_to_menu'
        }]);

        return { reply_markup: { inline_keyboard: buttons } };
    }

    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ–≥–æ–≤–æ—Ä—ñ–≤
    static formatContractsList(contracts, page = 1, totalPages = 1) {
        if (contracts.length === 0) {
            return 'üìã –°–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.';
        }

        let message = `üìã **–°–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤** (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ ${page}/${totalPages}):\n\n`;

        contracts.forEach((contract, index) => {
            const status = contract.status ? this.getStatusEmoji(contract.status) : '';
            message += `**${index + 1}.** ${contract.number} ${status}\n`;
            message += `   üë§ ${contract.client}\n`;
            message += `   üí∞ ${this.formatAmount(contract.amount)}\n`;
            message += `   üìÖ ${this.formatDate(contract.date)}\n\n`;
        });

        return message;
    }

    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    static formatStatistics(stats) {
        if (!stats) {
            return 'üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.';
        }

        return `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤**

üìã –í—Å—å–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤: **${stats.total}**
‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: **${stats.active}**
‚úîÔ∏è –í–∏–∫–æ–Ω–∞–Ω–∏—Ö: **${stats.completed}**
‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–∏—Ö: **${stats.cancelled}**

üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö: **${this.formatAmount(stats.totalAmount)}**
üìÖ –°–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: **${stats.avgDuration} –¥–Ω—ñ–≤**

üéØ **–ó–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å:**
   ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–æ: **${stats.thisMonth?.created || 0}**
   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: **${stats.thisMonth?.completed || 0}**
   üí∞ –°—É–º–∞: **${this.formatAmount(stats.thisMonth?.amount || 0)}**

üìà **–¢—Ä–µ–Ω–¥–∏:**
   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—è —Å—É–º–∞ –¥–æ–≥–æ–≤–æ—Ä—É: **${this.formatAmount(stats.averageAmount || 0)}**
   ‚Ä¢ –ù–∞–π–±—ñ–ª—å—à–∏–π –¥–æ–≥–æ–≤—ñ—Ä: **${this.formatAmount(stats.maxAmount || 0)}**
   ‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: **${stats.successRate || 0}%**`;
    }

    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π –¥–æ–≥–æ–≤—ñ—Ä
    static formatNewContractNotification(contractData) {
        return `üéâ **–ù–æ–≤–∏–π –¥–æ–≥–æ–≤—ñ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ!**

üìã –ù–æ–º–µ—Ä: **${contractData.number}**
üè¢ –ö–ª—ñ—î–Ω—Ç: **${contractData.client}**
üí∞ –°—É–º–∞: **${this.formatAmount(contractData.amount)}**
üë§ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: **${contractData.performer}**

üìÑ [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ–≥–æ–≤—ñ—Ä](${contractData.contractUrl})
üí∞ [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫](${contractData.invoiceUrl})
üìÑ [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç](${contractData.actUrl})
üìÅ [–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É](${contractData.folderUrl})`;
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—É
    static createNewContractKeyboard(contractNumber) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: `${EMOJI.INVOICE} –†–∞—Ö—É–Ω–æ–∫`, callback_data: `invoice_${contractNumber}` },
                        { text: `${EMOJI.ACT} –ê–∫—Ç`, callback_data: `act_${contractNumber}` }
                    ],
                    [
                        { text: `${EMOJI.REGENERATE} –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏`, callback_data: `regen_${contractNumber}` },
                        { text: `${EMOJI.EDIT} –†–µ–¥–∞–≥—É–≤–∞—Ç–∏`, callback_data: `edit_${contractNumber}` }
                    ]
                ]
            }
        };
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    static createConfirmationKeyboard(action, contractNumber = null) {
        const confirmData = contractNumber ? `confirm_${action}_${contractNumber}` : `confirm_${action}`;
        const cancelData = contractNumber ? `cancel_${action}_${contractNumber}` : `cancel_${action}`;

        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: BUTTON_TEXTS.CONFIRM_YES, callback_data: confirmData },
                        { text: BUTTON_TEXTS.CONFIRM_NO, callback_data: cancelData }
                    ]
                ]
            }
        };
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
    static createExportKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: BUTTON_TEXTS.EXPORT_EXCEL, callback_data: 'export_excel' },
                        { text: BUTTON_TEXTS.EXPORT_PDF, callback_data: 'export_pdf' }
                    ],
                    [
                        { text: BUTTON_TEXTS.EXPORT_JSON, callback_data: 'export_json' },
                        { text: BUTTON_TEXTS.BACK_TO_MENU, callback_data: 'back_to_menu' }
                    ]
                ]
            }
        };
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    static createFiltersKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: BUTTON_TEXTS.FILTER_ACTIVE, callback_data: 'filter_active' },
                        { text: BUTTON_TEXTS.FILTER_COMPLETED, callback_data: 'filter_completed' }
                    ],
                    [
                        { text: BUTTON_TEXTS.FILTER_THIS_MONTH, callback_data: 'filter_month' },
                        { text: BUTTON_TEXTS.CLEAR_FILTERS, callback_data: 'filter_clear' }
                    ],
                    [
                        { text: BUTTON_TEXTS.BACK_TO_MENU, callback_data: 'back_to_menu' }
                    ]
                ]
            }
        };
    }

    // –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è

    static formatAmount(amount) {
        if (!amount) return '0 –≥—Ä–Ω';
        const num = typeof amount === 'string' ? parseFloat(amount) : amount;
        return `${num.toLocaleString('uk-UA')} –≥—Ä–Ω`;
    }

    static formatDate(dateString) {
        if (!dateString) return '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('uk-UA');
        } catch {
            return dateString;
        }
    }

    static getStatusEmoji(status) {
        const statusMap = {
            '–∞–∫—Ç–∏–≤–Ω–∏–π': '‚úÖ',
            '–∑–∞–≤–µ—Ä—à–µ–Ω–∏–π': '‚úîÔ∏è',
            '—Å–∫–∞—Å–æ–≤–∞–Ω–∏–π': '‚ùå',
            '—á–µ—Ä–Ω–µ—Ç–∫–∞': 'üìù',
            '–æ—á—ñ–∫—É—î': '‚è≥'
        };
        return statusMap[status.toLowerCase()] || '';
    }

    // –û–±—Ä—ñ–∑–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è Telegram
    static truncateText(text, maxLength = LIMITS.MAX_MESSAGE_LENGTH) {
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength - 3) + '...';
    }

    // –ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è Markdown
    static escapeMarkdown(text) {
        return text.replace(/[*_`\[\]]/g, '\\$&');
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É
    static createProgressBar(current, total, width = 10) {
        const progress = Math.round((current / total) * width);
        const filled = '‚ñì'.repeat(progress);
        const empty = '‚ñë'.repeat(width - progress);
        const percentage = Math.round((current / total) * 100);
        return `[${filled}${empty}] ${percentage}%`;
    }
}

module.exports = MessageBuilder;
